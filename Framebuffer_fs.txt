//the version of GLSL
#version 330

// Default color buffer location is 0
// If you create framebuffer your own, you need to take care of it
//output of color
layout(location=0) out vec4 color;

//fTexcoord in vs.txt
in vec2 fTexcoord;

//texture objects is declared as "sampler" type in GLSL
//sampler1D, sampler2D,etc. 
uniform sampler2D uSampler;

//the sample distance
const float offset = 1.0 / 300;  

//the value of kernel
uniform float topleft;
uniform float topcenter;
uniform float topright;
uniform float middleleft;
uniform float middlecenter;
uniform float middleright;
uniform float bottomleft;
uniform float bottomcenter;
uniform float bottomright;

//the position of cursor
uniform float xpos;
uniform float ypos;

//the Magnification
uniform float zoom;

//the Radius of our magnifying glass
const float circleRadius = 0.1f;


void main()
{
	//offset array
    vec2 offsets[9] = vec2[](
        vec2(-offset, offset),  // top-left
        vec2(0.0f,    offset),  // top-center
        vec2(offset,  offset),  // top-right
        vec2(-offset, 0.0f),    // center-left
        vec2(0.0f,    0.0f),    // center-center
        vec2(offset,  0.0f),    // center-right
        vec2(-offset, -offset), // bottom-left
        vec2(0.0f,    -offset), // bottom-center
        vec2(offset,  -offset)  // bottom-right    
    );

	//normalize the GaussianBlur
	//it could be normalized to ensure the color won't be darker or lighter
	float a = 1 / (topleft + topcenter + topright + middleleft + middlecenter + middleright + bottomleft + bottomcenter + bottomright);
	
	float kernel[9] = float[](
		topleft * a, topcenter * a, topright *a,
		middleleft * a, middlecenter * a, middleright * a,
		bottomleft * a, bottomcenter * a, bottomright * a
	);
	
	/*
	float kernel[9] = float[](
    1.0 / 16, 2.0 / 16, 1.0 / 16,
    2.0 / 16, 4.0 / 16, 2.0 / 16,
    1.0 / 16, 2.0 / 16, 1.0 / 16  
    );
	*/

	//sample array
	vec3 sampleTex[9];

	if(xpos > 0.0 && ypos > 0.0)
	{
		//to calculate the distance between texcoord and cursor position 
		float relX = fTexcoord.s - xpos;
		float relY = fTexcoord.t - (1.0f - ypos);
		float dist = sqrt(relX*relX + relY*relY);

		if(dist <= circleRadius && dist > 0)
		{
			//in our magnifying glass

			//to magnify
			float newRad = dist * (zoom * dist / circleRadius);
			float newX = xpos + relX / dist * newRad;
			float newY = (1.0f - ypos) + relY / dist * newRad;
			vec2 newtexture = vec2(newX, newY);
			
			/*
			//to magnify
			float newX = xpos + relX * zoom;
			float newY = (1.0f - ypos) + relY * zoom;
			vec2 newtexture = vec2(newX, newY);
			*/

			//to sample
			for(int i = 0; i < 9; i++)
			{
				sampleTex[i] = vec3(texture(uSampler, newtexture + offsets[i]));
			}

			//to blur
			vec3 col = vec3(0.0);
			for(int i = 0; i < 9; i++)
				col += sampleTex[i] * kernel[i];

			color = vec4(col, 1.0);
		}
		else
		{
			//not in magnifying glass, output ad usual
			color = texture(uSampler, fTexcoord);
		}
	}
	else
	{
		//cursor is out off window, output ad usual
		color = texture(uSampler, fTexcoord);
	}
	
}
